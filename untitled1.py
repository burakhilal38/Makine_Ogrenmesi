# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11qhKXPZ4L3sBt74us1rNMZe7jdK6koGZ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score

# Veri setini yükleme
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
column_names = ["Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "DiabetesPedigreeFunction", "Age", "Outcome"]
df = pd.read_csv(url, header=None, names=column_names)

# Eksik değerleri uygun şekilde işleme
df['Glucose'] = df['Glucose'].replace(0, np.nan)
df['BloodPressure'] = df['BloodPressure'].replace(0, np.nan)
df['SkinThickness'] = df['SkinThickness'].replace(0, np.nan)
df['Insulin'] = df['Insulin'].replace(0, np.nan)
df['BMI'] = df['BMI'].replace(0, np.nan)

# Eksik değerleri sütunların ortalamaları ile doldurma
df.fillna(df.mean(), inplace=True)

# Girdi ve çıktı değişkenlerini belirleme
X = df.drop("Outcome", axis=1)
y = df["Outcome"]

# Veriyi %70 eğitim ve %30 test olarak bölme
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Naive Bayes modeli oluşturma ve eğitme
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)

# Test verisi üzerinde tahmin yapma
y_pred_nb = nb_model.predict(X_test)

# Sonuçları raporlama
print("Naive Bayes Classification Report:")
print("Confusion Matrix:")
cm = confusion_matrix(y_test, y_pred_nb)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Accuracy
accuracy = accuracy_score(y_test, y_pred_nb)
print("Accuracy:", accuracy)

# Precision
precision = precision_score(y_test, y_pred_nb)
print("Precision:", precision)

# Recall
recall = recall_score(y_test, y_pred_nb)
print("Recall:", recall)

# F1-Score
f1 = f1_score(y_test, y_pred_nb)
print("F1-Score:", f1)

# ROC Curve
y_probs_nb = nb_model.predict_proba(X_test)
fpr, tpr, thresholds = roc_curve(y_test, y_probs_nb[:, 1])
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % roc_auc_score(y_test, y_probs_nb[:, 1]))
plt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

# Model Accuracy Curve
train_accuracy = nb_model.score(X_train, y_train)
test_accuracy = nb_model.score(X_test, y_test)
plt.figure(figsize=(8, 6))
plt.plot(range(1), train_accuracy, marker='o', label='Training Accuracy')
plt.plot(range(1), test_accuracy, marker='o', label='Test Accuracy')
plt.xlabel('Iterations')
plt.ylabel('Accuracy')
plt.title('Model Accuracy')
plt.legend()
plt.show()